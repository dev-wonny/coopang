services:
    postgres:
        image: postgres:latest
        container_name: postgres
        environment:
            POSTGRES_DB: coopang-user
            POSTGRES_USER: ${DB_USERNAME}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
        ports:
            - "5432:5432"
        networks:
            - coopang
        volumes:
            - db_data:/var/lib/postgresql/data
            - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # init 스크립트를 마운트

    redis-stack:
        image: redis/redis-stack
        container_name: redis-stack-compose
        restart: always
        environment:
            REDIS_ARGS: "--requirepass ${DB_PASSWORD}"
        ports:
            - "6379:6379"
            - "8001:8001"
    prometheus:
        image: prom/prometheus
        container_name: prometheus
        volumes:
            - ./MONITOR/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml  # Prometheus 설정 파일 마운트
        ports:
            - "9090:9090"
        networks:
            - coopang
    grafana:
        image: grafana/grafana
        container_name: grafana
        ports:
            - "3000:3000"
        networks:
            - coopang
    loki:
        image: grafana/loki:3.0.0
        container_name: loki
        ports:
            - "3100:3100"
        networks:
            - coopang
        volumes:
            - ./MONITOR/loki/loki-config.yml:/mnt/config/loki-config.yml  # Loki 설정 파일 마운트
        command: -config.file=/mnt/config/loki-config.yml
    # Kafka
    zookeeper:
        image: wurstmeister/zookeeper:latest
        platform: linux/amd64
        ports:
            - "2181:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000

    kafka:
        image: wurstmeister/kafka:latest
        platform: linux/amd64
        ports:
            - "9092:9092"
        environment:
            KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
            KAFKA_LISTENERS: INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
            KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock

    # Kafka UI
    kafka-ui:
        image: provectuslabs/kafka-ui:latest
        platform: linux/amd64
        ports:
            - "8080:8080"
        environment:
            KAFKA_CLUSTERS_0_NAME: local
            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
            KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
            KAFKA_CLUSTERS_0_READONLY: "false"

networks:
    coopang:
        external: true  # 이미 생성된 네트워크를 사용
volumes:
    db_data: