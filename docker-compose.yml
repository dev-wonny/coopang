services:
    postgres:
        image: postgres:latest
        container_name: postgres
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${DB_USERNAME}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
        ports:
            - "5432:5432"
        networks:
            - coopang
        volumes:
            - db_data:/var/lib/postgresql/data
            - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # init 스크립트를 마운트

    redis-stack:
        image: redis/redis-stack
        container_name: redis-stack-compose
        restart: always
        environment:
            REDIS_ARGS: "--requirepass ${REDIS_PASSWORD}"
        ports:
            - "6379:6379"
            - "8001:8001"
        networks:
            - coopang

    prometheus:
        image: prom/prometheus
        container_name: prometheus
        volumes:
            - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml  # Prometheus 설정 파일 마운트
        ports:
            - "9090:9090"
        networks:
            - coopang

    grafana:
        image: grafana/grafana
        container_name: grafana
        ports:
            - "3000:3000"
        networks:
            - coopang

    loki:
        image: grafana/loki:3.0.0
        container_name: loki
        ports:
            - "3100:3100"
        networks:
            - coopang
        volumes:
            - ./loki/loki-config.yml:/mnt/config/loki-config.yml  # Loki 설정 파일 마운트
        command: -config.file=/mnt/config/loki-config.yml

    eureka:
        image: image-eureka
        container_name: eureka
        ports:
            - "19090:19090"
        networks:
            - coopang

    gateway:
        image: image-gateway
        container_name: gateway
        ports:
            - "19091:19091"
        depends_on:
            - eureka
        networks:
            - coopang

    user:
        image: image-user
        container_name: user
        ports:
            - "19092:19092"
        depends_on:
            - eureka
            - postgres
        networks:
            - coopang

    hub:
        image: image-hub
        container_name: hub
        ports:
            - "19093:19093"
        depends_on:
            - eureka
            - postgres
        networks:
            - coopang

networks:
    coopang:
        external: true  # 이미 생성된 네트워크를 사용
volumes:
    db_data: